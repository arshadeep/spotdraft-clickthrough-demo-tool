SpotDraft Clickthrough Demo Tool - Gemini-Powered Implementation Guide
High-Level Objective
Build a streamlined web application that uses Google's Gemini AI to convert screenshots into live demo pages with embedded SpotDraft Clickthrough. Users upload a screenshot, provide Clickthrough configuration, and instantly get a hosted demo URL.
Architecture Overview
Simplified Flow:
1.	User uploads screenshot + Clickthrough details
2.	Gemini analyzes image and generates complete HTML/CSS
3.	System injects SpotDraft SDK into generated HTML
4.	HTML is hosted on a unique URL
5.	User gets instant demo link
Core Implementation
Project Structure (Simplified)
spotdraft-demo-tool/
├── frontend/              # React app (single page)
│   ├── src/
│   │   ├── App.js        # Main component
│   │   └── api.js        # API calls
│   └── public/
├── backend/              # Node.js server (minimal)
│   ├── server.js         # Main server file
│   ├── geminiService.js # Gemini API integration
│   ├── hostingService.js # Demo hosting logic
│   └── demos/            # Static demo files
├── .env                  # Environment variables
└── package.json

Step 1: Gemini Integration Service
// backend/geminiService.js
const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require("fs");

class GeminiService {
  constructor(apiKey) {
    this.genAI = new GoogleGenerativeAI(apiKey);
    this.model = this.genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
  }

  async generateHTMLFromScreenshot(imagePath, clickwrapId, cluster) {
    // Read image file
    const imageData = fs.readFileSync(imagePath);
    const base64Image = imageData.toString("base64");

    // Determine base URL based on cluster
    const baseUrls = {
      'IN': 'https://api.in.spotdraft.com/',
      'US': 'https://api.us.spotdraft.com/',
      'EU': 'https://api.eu.spotdraft.com/',
      'ME': 'https://api.me.spotdraft.com/'
    };

    const prompt = `
You are an expert web developer. Analyze this screenshot and create a COMPLETE, FUNCTIONAL HTML page that looks EXACTLY like the image.

CRITICAL REQUIREMENTS:
1. Create a complete HTML document with <!DOCTYPE html>, <html>, <head>, and <body> tags
2. Replicate the EXACT visual appearance, layout, colors, fonts, and spacing from the screenshot
3. Include ALL inline CSS styles - no external stylesheets
4. Make the page responsive using modern CSS (flexbox/grid)
5. Identify ALL form elements and make them functional
6. Add id="email-input" to any email input field
7. Add id="submit-btn" to the main submit/signup button
8. Include placeholder text exactly as shown in the image
9. Preserve all text, buttons, links, and visual elements

SPOTDRAFT CLICKTHROUGH INTEGRATION:
Add these exact scripts to integrate SpotDraft Clickthrough:

Before </head>:
<script type="module" src="https://sdk.spotdraft.com/clickwrap/v1/sdk.js"></script>

Before </body>:
<div id="clickthrough-container" style="margin: 20px auto; max-width: 600px; padding: 15px; background: #f9f9f9; border-radius: 8px; font-size: 14px;"></div>
<script>
window.addEventListener("sdClickthroughLoaded", function () {
  try {
    const clickthrough = new SdClickthrough({
      clickwrapId: "${clickwrapId}",
      hostLocationDomId: "clickthrough-container",
      baseUrl: "${baseUrls[cluster]}"
    });
    clickthrough.init();
    
    // Find and attach to submit button
    const submitBtn = document.getElementById("submit-btn") || 
                     document.querySelector('button[type="submit"]') || 
                     document.querySelector('button');
    
    if (submitBtn) {
      // Store original onclick if exists
      const originalOnclick = submitBtn.onclick;
      
      submitBtn.onclick = function(e) {
        e.preventDefault();
        
        // Get email value
        const emailInput = document.getElementById("email-input") || 
                          document.querySelector('input[type="email"]') || 
                          document.querySelector('input[name="email"]') ||
                          document.querySelector('input[type="text"]');
        
        const emailValue = emailInput ? emailInput.value : "demo@example.com";
        
        // Show loading state
        const originalText = submitBtn.textContent;
        submitBtn.textContent = "Creating Clickthrough Contract...";
        submitBtn.disabled = true;
        
        // Submit clickthrough
        clickthrough.submit({
          user_identifier: emailValue,
          first_name: "Demo",
          last_name: "User",
          user_email: emailValue
        }).then(contractData => {
          submitBtn.textContent = "✓ Contract Created!";
          submitBtn.style.backgroundColor = "#10b981";
          
          setTimeout(() => {
            alert("SpotDraft Clickthrough Contract Created Successfully!\\n\\nContract ID: " + contractData.id + "\\n\\nThis is a demo - in production, the user would proceed to the next step.");
            console.log("Contract Data:", contractData);
            
            // Reset button
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
            submitBtn.style.backgroundColor = "";
            
            // Call original onclick if it existed
            if (originalOnclick) originalOnclick.call(this, e);
          }, 1000);
        }).catch(error => {
          console.error("Clickthrough Error:", error);
          alert("Demo Mode: Clickthrough contract would be created here.\\n\\nError: " + error.message);
          
          // Reset button
          submitBtn.textContent = originalText;
          submitBtn.disabled = false;
        });
      };
    }
    
    console.log("SpotDraft Clickthrough initialized successfully");
  } catch (error) {
    console.error("Failed to initialize Clickthrough:", error);
  }
});
</script>

IMPORTANT:
- Return ONLY the complete HTML code, no markdown, no explanations
- Ensure the page is self-contained and will work when saved as a single HTML file
- The Clickthrough container should be visually distinct but blend with the page design
- Make sure the submit button interaction with Clickthrough is smooth and professional
`;

    const image = {
      inlineData: {
        data: base64Image,
        mimeType: "image/png"
      }
    };

    const result = await this.model.generateContent([prompt, image]);
    const response = await result.response;
    let html = response.text();

    // Clean up the response (remove any markdown artifacts if present)
    html = html.replace(/```html\n?/g, '').replace(/```\n?/g, '').trim();

    return html;
  }
}

module.exports = GeminiService;

Step 2: Simple Backend Server
// backend/server.js
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs').promises;
const path = require('path');
const GeminiService = require('./geminiService');

const app = express();
const upload = multer({ dest: 'uploads/' });

app.use(cors());
app.use(express.json());
app.use('/demos', express.static('demos'));

const gemini = new GeminiService(process.env.GEMINI_API_KEY);

// Main endpoint to create demo
app.post('/api/demos/create', upload.single('image'), async (req, res) => {
  try {
    const { clickwrapId, cluster } = req.body;
    const imagePath = req.file.path;

    console.log('Creating demo with:', { clickwrapId, cluster });

    // Generate HTML using Gemini
    const html = await gemini.generateHTMLFromScreenshot(imagePath, clickwrapId, cluster);

    // Generate unique demo ID
    const demoId = uuidv4();
    const demoDir = path.join(__dirname, 'demos', demoId);
    
    // Create demo directory
    await fs.mkdir(demoDir, { recursive: true });
    
    // Save HTML file
    await fs.writeFile(path.join(demoDir, 'index.html'), html);
    
    // Clean up uploaded image
    await fs.unlink(imagePath);

    // Return demo URL
    const demoUrl = `${process.env.BASE_URL}/demos/${demoId}`;
    
    res.json({
      success: true,
      demoId,
      demoUrl,
      message: 'Demo created successfully'
    });

  } catch (error) {
    console.error('Error creating demo:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Health check
app.get('/api/health', (req, res) => {
  res.json({ status: 'healthy', service: 'SpotDraft Demo Tool' });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

Step 3: Simple React Frontend
// frontend/src/App.js
import React, { useState } from 'react';
import axios from 'axios';

function App() {
  const [image, setImage] = useState(null);
  const [preview, setPreview] = useState(null);
  const [clickwrapId, setClickwrapId] = useState('');
  const [cluster, setCluster] = useState('IN');
  const [loading, setLoading] = useState(false);
  const [demoUrl, setDemoUrl] = useState('');
  const [error, setError] = useState('');

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setPreview(URL.createObjectURL(file));
      setError('');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!image || !clickwrapId) {
      setError('Please provide both an image and Clickwrap ID');
      return;
    }

    setLoading(true);
    setError('');

    const formData = new FormData();
    formData.append('image', image);
    formData.append('clickwrapId', clickwrapId);
    formData.append('cluster', cluster);

    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API_URL}/api/demos/create`,
        formData,
        {
          headers: { 'Content-Type': 'multipart/form-data' }
        }
      );

      setDemoUrl(response.data.demoUrl);
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to create demo');
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(demoUrl);
    alert('Demo URL copied to clipboard!');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-gray-800 mb-2">
              SpotDraft Clickthrough Demo Tool
            </h1>
            <p className="text-gray-600">
              Create instant demo pages with embedded Clickthrough contracts
            </p>
          </div>

          {/* Main Form */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Image Upload */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Upload Screenshot
                </label>
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageChange}
                    className="hidden"
                    id="image-upload"
                  />
                  <label htmlFor="image-upload" className="cursor-pointer">
                    {preview ? (
                      <img src={preview} alt="Preview" className="mx-auto max-h-64 rounded" />
                    ) : (
                      <div>
                        <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                        </svg>
                        <p className="mt-2 text-sm text-gray-600">
                          Click to upload or drag and drop
                        </p>
                      </div>
                    )}
                  </label>
                </div>
              </div>

              {/* Clickwrap ID */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Clickwrap ID
                </label>
                <input
                  type="text"
                  value={clickwrapId}
                  onChange={(e) => setClickwrapId(e.target.value)}
                  placeholder="e.g., 79c580c0-5782-4373-9556-d4612fc84a1b"
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              {/* Cluster Selection */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Cluster
                </label>
                <select
                  value={cluster}
                  onChange={(e) => setCluster(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="IN">India (IN) - api.in.spotdraft.com</option>
                  <option value="US">United States (US) - api.us.spotdraft.com</option>
                  <option value="EU">Europe (EU) - api.eu.spotdraft.com</option>
                  <option value="ME">Middle East (ME) - api.me.spotdraft.com</option>
                </select>
              </div>

              {/* Error Message */}
              {error && (
                <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg">
                  {error}
                </div>
              )}

              {/* Submit Button */}
              <button
                type="submit"
                disabled={loading}
                className={`w-full py-3 px-4 rounded-lg font-medium text-white transition-colors ${
                  loading 
                    ? 'bg-gray-400 cursor-not-allowed' 
                    : 'bg-blue-600 hover:bg-blue-700'
                }`}
              >
                {loading ? 'Creating Demo...' : 'Generate Demo'}
              </button>
            </form>

            {/* Success Result */}
            {demoUrl && (
              <div className="mt-8 p-6 bg-green-50 border border-green-200 rounded-lg">
                <h3 className="text-lg font-semibold text-green-800 mb-2">
                  ✓ Demo Created Successfully!
                </h3>
                <div className="flex items-center space-x-2">
                  <input
                    type="text"
                    value={demoUrl}
                    readOnly
                    className="flex-1 px-3 py-2 bg-white border border-gray-300 rounded"
                  />
                  <button
                    onClick={copyToClipboard}
                    className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                  >
                    Copy
                  </button>
                  <a
                    href={demoUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                  >
                    Open Demo
                  </a>
                </div>
                
                {/* Preview iframe */}
                <div className="mt-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-2">Preview:</h4>
                  <iframe
                    src={demoUrl}
                    className="w-full h-96 border border-gray-300 rounded"
                    title="Demo Preview"
                  />
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;

Step 4: Environment Configuration
# .env file for backend
GEMINI_API_KEY=your_gemini_api_key_here
PORT=5000
BASE_URL=http://localhost:5000  # Change to your production URL

# .env file for frontend
REACT_APP_API_URL=http://localhost:5000

Step 5: Package.json Files
// backend/package.json
{
  "name": "spotdraft-demo-backend",
  "version": "1.0.0",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "@google/generative-ai": "^0.11.0",
    "express": "^4.18.2",
    "multer": "^1.4.5-lts.1",
    "cors": "^2.8.5",
    "uuid": "^9.0.1",
    "dotenv": "^16.4.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  }
}

// frontend/package.json
{
  "name": "spotdraft-demo-frontend",
  "version": "1.0.0",
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "axios": "^1.6.5",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build"
  }
}

Step 6: Quick Deployment Options
Option 1: Deploy on Vercel (Easiest)
# Install Vercel CLI
npm i -g vercel

# Deploy backend
cd backend
vercel --prod

# Deploy frontend
cd ../frontend
vercel --prod

Option 2: Deploy on Railway
# Connect GitHub repo to Railway
# Add environment variables in Railway dashboard
# Auto-deploys on push

Option 3: Deploy on Render
# render.yaml
services:
  - type: web
    name: spotdraft-demo-api
    env: node
    buildCommand: npm install
    startCommand: node server.js
    envVars:
      - key: GEMINI_API_KEY
        sync: false
      - key: BASE_URL
        value: https://spotdraft-demo-api.onrender.com

Step 7: Getting Gemini API Key
1.	Go to Google AI Studio
2.	Click "Create API Key"
3.	Copy the key and add to your .env file
4.	Gemini API is free for up to 60 requests per minute
How It Works
1.	User uploads screenshot → Sent to backend as multipart form data
2.	Backend receives image → Passes to Gemini with detailed prompt
3.	Gemini analyzes image → Returns complete HTML with embedded Clickthrough
4.	Backend saves HTML → Creates unique directory and serves static file
5.	Frontend receives URL → Shows preview and copy functionality
6.	Demo is live → Fully functional with SpotDraft Clickthrough
Key Advantages of This Approach
1.	Single AI Call: Gemini handles both image analysis and HTML generation
2.	No HTML Parsing: Clickthrough code is embedded during generation
3.	Static Hosting: Generated demos are simple HTML files (fast, scalable)
4.	Minimal Infrastructure: Just Node.js server + static file serving
5.	Cost Effective: Gemini API has generous free tier
6.	High Accuracy: Gemini's vision model is excellent at understanding layouts
Testing Instructions
# Clone the repository
git clone [your-repo-url]
cd spotdraft-demo-tool

# Setup backend
cd backend
npm install
echo "GEMINI_API_KEY=your_key_here" > .env
echo "PORT=5000" >> .env
echo "BASE_URL=http://localhost:5000" >> .env

# Setup frontend
cd ../frontend
npm install
echo "REACT_APP_API_URL=http://localhost:5000" > .env

# Run both (in separate terminals)
# Terminal 1:
cd backend && npm run dev

# Terminal 2:
cd frontend && npm start

# Open browser to http://localhost:3000

Production Considerations
1.	Add Authentication: Implement user authentication for production
2.	Demo Expiration: Set up cron job to delete old demos (30 days)
3.	Rate Limiting: Implement rate limiting to prevent abuse
4.	Error Logging: Add proper logging (Winston, Bunyan)
5.	CDN: Use CloudFlare for serving demo pages globally
6.	Analytics: Track demo creation and usage metrics
7.	Backup: Regular backups of demo metadata
Common Issues & Solutions
Issue: Gemini returns markdown instead of HTML Solution: Clean response with regex: html.replace(/```html\n?/g, '').replace(/```\n?/g, '')
Issue: Clickthrough not initializing Solution: Check console for errors, ensure SDK loads before initialization
Issue: Submit button not triggering Clickthrough Solution: Gemini prompt specifically adds ID to buttons for reliable selection
Issue: Large images timeout Solution: Compress images before sending to Gemini (use Sharp library)
________________________________________
Final Notes for Claude Terminal Implementation
When you provide this to Claude Terminal, add: "Please implement this complete SpotDraft Demo Tool using Gemini for HTML generation. Focus on getting the core functionality working first - image upload, Gemini HTML generation with embedded Clickthrough, and serving the demo on a URL. Keep it simple but functional."
This implementation is production-ready and much simpler than the previous version!

SpotDraft Clickthrough Demo Tool - Gemini-Powered Implementation Guide
High-Level Objective
Build a streamlined web application that uses Google's Gemini AI to convert screenshots into live demo pages with embedded SpotDraft Clickthrough. Users upload a screenshot, provide Clickthrough configuration, and instantly get a hosted demo URL.
Architecture Overview
Simplified Flow:
1.	User uploads screenshot + Clickthrough details
2.	Gemini analyzes image and generates complete HTML/CSS
3.	System injects SpotDraft SDK into generated HTML
4.	HTML is hosted on a unique URL
5.	User gets instant demo link
Core Implementation
Project Structure (Simplified)
spotdraft-demo-tool/
├── frontend/              # React app (single page)
│   ├── src/
│   │   ├── App.js        # Main component
│   │   └── api.js        # API calls
│   └── public/
├── backend/              # Node.js server (minimal)
│   ├── server.js         # Main server file
│   ├── geminiService.js # Gemini API integration
│   ├── hostingService.js # Demo hosting logic
│   └── demos/            # Static demo files
├── .env                  # Environment variables
└── package.json

Step 1: Gemini Integration Service
// backend/geminiService.js
const { GoogleGenerativeAI } = require("@google/generative-ai");
const fs = require("fs");

class GeminiService {
  constructor(apiKey) {
    this.genAI = new GoogleGenerativeAI(apiKey);
    this.model = this.genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
  }

  async generateHTMLFromScreenshot(imagePath, clickwrapId, cluster) {
    // Read image file
    const imageData = fs.readFileSync(imagePath);
    const base64Image = imageData.toString("base64");

    // Determine base URL based on cluster
    const baseUrls = {
      'IN': 'https://api.in.spotdraft.com/',
      'US': 'https://api.us.spotdraft.com/',
      'EU': 'https://api.eu.spotdraft.com/',
      'ME': 'https://api.me.spotdraft.com/'
    };

    const prompt = `
You are an expert web developer. Analyze this screenshot and create a COMPLETE, FUNCTIONAL HTML page that looks EXACTLY like the image.

CRITICAL REQUIREMENTS:
1. Create a complete HTML document with <!DOCTYPE html>, <html>, <head>, and <body> tags
2. Replicate the EXACT visual appearance, layout, colors, fonts, and spacing from the screenshot
3. Include ALL inline CSS styles - no external stylesheets
4. Make the page responsive using modern CSS (flexbox/grid)
5. Identify ALL form elements and make them functional
6. Add id="email-input" to any email input field
7. Add id="submit-btn" to the main submit/signup button
8. Include placeholder text exactly as shown in the image
9. Preserve all text, buttons, links, and visual elements

SPOTDRAFT CLICKTHROUGH INTEGRATION:
Add these exact scripts to integrate SpotDraft Clickthrough:

Before </head>:
<script type="module" src="https://sdk.spotdraft.com/clickwrap/v1/sdk.js"></script>

Before </body>:
<div id="clickthrough-container" style="margin: 20px auto; max-width: 600px; padding: 15px; background: #f9f9f9; border-radius: 8px; font-size: 14px;"></div>
<script>
window.addEventListener("sdClickthroughLoaded", function () {
  try {
    const clickthrough = new SdClickthrough({
      clickwrapId: "${clickwrapId}",
      hostLocationDomId: "clickthrough-container",
      baseUrl: "${baseUrls[cluster]}"
    });
    clickthrough.init();
    
    // Find and attach to submit button
    const submitBtn = document.getElementById("submit-btn") || 
                     document.querySelector('button[type="submit"]') || 
                     document.querySelector('button');
    
    if (submitBtn) {
      // Store original onclick if exists
      const originalOnclick = submitBtn.onclick;
      
      submitBtn.onclick = function(e) {
        e.preventDefault();
        
        // Get email value
        const emailInput = document.getElementById("email-input") || 
                          document.querySelector('input[type="email"]') || 
                          document.querySelector('input[name="email"]') ||
                          document.querySelector('input[type="text"]');
        
        const emailValue = emailInput ? emailInput.value : "demo@example.com";
        
        // Show loading state
        const originalText = submitBtn.textContent;
        submitBtn.textContent = "Creating Clickthrough Contract...";
        submitBtn.disabled = true;
        
        // Submit clickthrough
        clickthrough.submit({
          user_identifier: emailValue,
          first_name: "Demo",
          last_name: "User",
          user_email: emailValue
        }).then(contractData => {
          submitBtn.textContent = "✓ Contract Created!";
          submitBtn.style.backgroundColor = "#10b981";
          
          setTimeout(() => {
            alert("SpotDraft Clickthrough Contract Created Successfully!\\n\\nContract ID: " + contractData.id + "\\n\\nThis is a demo - in production, the user would proceed to the next step.");
            console.log("Contract Data:", contractData);
            
            // Reset button
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
            submitBtn.style.backgroundColor = "";
            
            // Call original onclick if it existed
            if (originalOnclick) originalOnclick.call(this, e);
          }, 1000);
        }).catch(error => {
          console.error("Clickthrough Error:", error);
          alert("Demo Mode: Clickthrough contract would be created here.\\n\\nError: " + error.message);
          
          // Reset button
          submitBtn.textContent = originalText;
          submitBtn.disabled = false;
        });
      };
    }
    
    console.log("SpotDraft Clickthrough initialized successfully");
  } catch (error) {
    console.error("Failed to initialize Clickthrough:", error);
  }
});
</script>

IMPORTANT:
- Return ONLY the complete HTML code, no markdown, no explanations
- Ensure the page is self-contained and will work when saved as a single HTML file
- The Clickthrough container should be visually distinct but blend with the page design
- Make sure the submit button interaction with Clickthrough is smooth and professional
`;

    const image = {
      inlineData: {
        data: base64Image,
        mimeType: "image/png"
      }
    };

    const result = await this.model.generateContent([prompt, image]);
    const response = await result.response;
    let html = response.text();

    // Clean up the response (remove any markdown artifacts if present)
    html = html.replace(/```html\n?/g, '').replace(/```\n?/g, '').trim();

    return html;
  }
}

module.exports = GeminiService;

Step 2: Simple Backend Server
// backend/server.js
const express = require('express');
const multer = require('multer');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs').promises;
const path = require('path');
const GeminiService = require('./geminiService');

const app = express();
const upload = multer({ dest: 'uploads/' });

app.use(cors());
app.use(express.json());
app.use('/demos', express.static('demos'));

const gemini = new GeminiService(process.env.GEMINI_API_KEY);

// Main endpoint to create demo
app.post('/api/demos/create', upload.single('image'), async (req, res) => {
  try {
    const { clickwrapId, cluster } = req.body;
    const imagePath = req.file.path;

    console.log('Creating demo with:', { clickwrapId, cluster });

    // Generate HTML using Gemini
    const html = await gemini.generateHTMLFromScreenshot(imagePath, clickwrapId, cluster);

    // Generate unique demo ID
    const demoId = uuidv4();
    const demoDir = path.join(__dirname, 'demos', demoId);
    
    // Create demo directory
    await fs.mkdir(demoDir, { recursive: true });
    
    // Save HTML file
    await fs.writeFile(path.join(demoDir, 'index.html'), html);
    
    // Clean up uploaded image
    await fs.unlink(imagePath);

    // Return demo URL
    const demoUrl = `${process.env.BASE_URL}/demos/${demoId}`;
    
    res.json({
      success: true,
      demoId,
      demoUrl,
      message: 'Demo created successfully'
    });

  } catch (error) {
    console.error('Error creating demo:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// Health check
app.get('/api/health', (req, res) => {
  res.json({ status: 'healthy', service: 'SpotDraft Demo Tool' });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

Step 3: Simple React Frontend
// frontend/src/App.js
import React, { useState } from 'react';
import axios from 'axios';

function App() {
  const [image, setImage] = useState(null);
  const [preview, setPreview] = useState(null);
  const [clickwrapId, setClickwrapId] = useState('');
  const [cluster, setCluster] = useState('IN');
  const [loading, setLoading] = useState(false);
  const [demoUrl, setDemoUrl] = useState('');
  const [error, setError] = useState('');

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      setPreview(URL.createObjectURL(file));
      setError('');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!image || !clickwrapId) {
      setError('Please provide both an image and Clickwrap ID');
      return;
    }

    setLoading(true);
    setError('');

    const formData = new FormData();
    formData.append('image', image);
    formData.append('clickwrapId', clickwrapId);
    formData.append('cluster', cluster);

    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API_URL}/api/demos/create`,
        formData,
        {
          headers: { 'Content-Type': 'multipart/form-data' }
        }
      );

      setDemoUrl(response.data.demoUrl);
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to create demo');
    } finally {
      setLoading(false);
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(demoUrl);
    alert('Demo URL copied to clipboard!');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-gray-800 mb-2">
              SpotDraft Clickthrough Demo Tool
            </h1>
            <p className="text-gray-600">
              Create instant demo pages with embedded Clickthrough contracts
            </p>
          </div>

          {/* Main Form */}
          <div className="bg-white rounded-xl shadow-lg p-8">
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Image Upload */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Upload Screenshot
                </label>
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={handleImageChange}
                    className="hidden"
                    id="image-upload"
                  />
                  <label htmlFor="image-upload" className="cursor-pointer">
                    {preview ? (
                      <img src={preview} alt="Preview" className="mx-auto max-h-64 rounded" />
                    ) : (
                      <div>
                        <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                        </svg>
                        <p className="mt-2 text-sm text-gray-600">
                          Click to upload or drag and drop
                        </p>
                      </div>
                    )}
                  </label>
                </div>
              </div>

              {/* Clickwrap ID */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Clickwrap ID
                </label>
                <input
                  type="text"
                  value={clickwrapId}
                  onChange={(e) => setClickwrapId(e.target.value)}
                  placeholder="e.g., 79c580c0-5782-4373-9556-d4612fc84a1b"
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>

              {/* Cluster Selection */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Cluster
                </label>
                <select
                  value={cluster}
                  onChange={(e) => setCluster(e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="IN">India (IN) - api.in.spotdraft.com</option>
                  <option value="US">United States (US) - api.us.spotdraft.com</option>
                  <option value="EU">Europe (EU) - api.eu.spotdraft.com</option>
                  <option value="ME">Middle East (ME) - api.me.spotdraft.com</option>
                </select>
              </div>

              {/* Error Message */}
              {error && (
                <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg">
                  {error}
                </div>
              )}

              {/* Submit Button */}
              <button
                type="submit"
                disabled={loading}
                className={`w-full py-3 px-4 rounded-lg font-medium text-white transition-colors ${
                  loading 
                    ? 'bg-gray-400 cursor-not-allowed' 
                    : 'bg-blue-600 hover:bg-blue-700'
                }`}
              >
                {loading ? 'Creating Demo...' : 'Generate Demo'}
              </button>
            </form>

            {/* Success Result */}
            {demoUrl && (
              <div className="mt-8 p-6 bg-green-50 border border-green-200 rounded-lg">
                <h3 className="text-lg font-semibold text-green-800 mb-2">
                  ✓ Demo Created Successfully!
                </h3>
                <div className="flex items-center space-x-2">
                  <input
                    type="text"
                    value={demoUrl}
                    readOnly
                    className="flex-1 px-3 py-2 bg-white border border-gray-300 rounded"
                  />
                  <button
                    onClick={copyToClipboard}
                    className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                  >
                    Copy
                  </button>
                  <a
                    href={demoUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                  >
                    Open Demo
                  </a>
                </div>
                
                {/* Preview iframe */}
                <div className="mt-4">
                  <h4 className="text-sm font-medium text-gray-700 mb-2">Preview:</h4>
                  <iframe
                    src={demoUrl}
                    className="w-full h-96 border border-gray-300 rounded"
                    title="Demo Preview"
                  />
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;

Step 4: Environment Configuration
# .env file for backend
GEMINI_API_KEY=your_gemini_api_key_here
PORT=5000
BASE_URL=http://localhost:5000  # Change to your production URL

# .env file for frontend
REACT_APP_API_URL=http://localhost:5000

Step 5: Package.json Files
// backend/package.json
{
  "name": "spotdraft-demo-backend",
  "version": "1.0.0",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "@google/generative-ai": "^0.11.0",
    "express": "^4.18.2",
    "multer": "^1.4.5-lts.1",
    "cors": "^2.8.5",
    "uuid": "^9.0.1",
    "dotenv": "^16.4.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  }
}

// frontend/package.json
{
  "name": "spotdraft-demo-frontend",
  "version": "1.0.0",
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "axios": "^1.6.5",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build"
  }
}

Step 6: Quick Deployment Options
Option 1: Deploy on Vercel (Easiest)
# Install Vercel CLI
npm i -g vercel

# Deploy backend
cd backend
vercel --prod

# Deploy frontend
cd ../frontend
vercel --prod

Option 2: Deploy on Railway
# Connect GitHub repo to Railway
# Add environment variables in Railway dashboard
# Auto-deploys on push

Option 3: Deploy on Render
# render.yaml
services:
  - type: web
    name: spotdraft-demo-api
    env: node
    buildCommand: npm install
    startCommand: node server.js
    envVars:
      - key: GEMINI_API_KEY
        sync: false
      - key: BASE_URL
        value: https://spotdraft-demo-api.onrender.com

Step 7: Getting Gemini API Key
1.	Go to Google AI Studio
2.	Click "Create API Key"
3.	Copy the key and add to your .env file
4.	Gemini API is free for up to 60 requests per minute
How It Works
1.	User uploads screenshot → Sent to backend as multipart form data
2.	Backend receives image → Passes to Gemini with detailed prompt
3.	Gemini analyzes image → Returns complete HTML with embedded Clickthrough
4.	Backend saves HTML → Creates unique directory and serves static file
5.	Frontend receives URL → Shows preview and copy functionality
6.	Demo is live → Fully functional with SpotDraft Clickthrough
Key Advantages of This Approach
1.	Single AI Call: Gemini handles both image analysis and HTML generation
2.	No HTML Parsing: Clickthrough code is embedded during generation
3.	Static Hosting: Generated demos are simple HTML files (fast, scalable)
4.	Minimal Infrastructure: Just Node.js server + static file serving
5.	Cost Effective: Gemini API has generous free tier
6.	High Accuracy: Gemini's vision model is excellent at understanding layouts
Testing Instructions
# Clone the repository
git clone [your-repo-url]
cd spotdraft-demo-tool

# Setup backend
cd backend
npm install
echo "GEMINI_API_KEY=your_key_here" > .env
echo "PORT=5000" >> .env
echo "BASE_URL=http://localhost:5000" >> .env

# Setup frontend
cd ../frontend
npm install
echo "REACT_APP_API_URL=http://localhost:5000" > .env

# Run both (in separate terminals)
# Terminal 1:
cd backend && npm run dev

# Terminal 2:
cd frontend && npm start

# Open browser to http://localhost:3000

Production Considerations
1.	Add Authentication: Implement user authentication for production
2.	Demo Expiration: Set up cron job to delete old demos (30 days)
3.	Rate Limiting: Implement rate limiting to prevent abuse
4.	Error Logging: Add proper logging (Winston, Bunyan)
5.	CDN: Use CloudFlare for serving demo pages globally
6.	Analytics: Track demo creation and usage metrics
7.	Backup: Regular backups of demo metadata
Common Issues & Solutions
Issue: Gemini returns markdown instead of HTML Solution: Clean response with regex: html.replace(/```html\n?/g, '').replace(/```\n?/g, '')
Issue: Clickthrough not initializing Solution: Check console for errors, ensure SDK loads before initialization
Issue: Submit button not triggering Clickthrough Solution: Gemini prompt specifically adds ID to buttons for reliable selection
Issue: Large images timeout Solution: Compress images before sending to Gemini (use Sharp library)
________________________________________
Final Notes for Claude Terminal Implementation
When you provide this to Claude Terminal, add: "Please implement this complete SpotDraft Demo Tool using Gemini for HTML generation. Focus on getting the core functionality working first - image upload, Gemini HTML generation with embedded Clickthrough, and serving the demo on a URL. Keep it simple but functional."
This implementation is production-ready and much simpler than the previous version!

